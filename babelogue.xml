<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *	
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
	<ModulePrefs title="Google Hangout Translate App">
		<Require feature="rpc" />
		<Require feature="views" />
	</ModulePrefs>
	<Content type="html"><![CDATA[     

<html>
<style type="text/css">
body {
   background-color: #E5E5E5;
}
button,select,.mainbox {
   background-color: #FFFFFF;
}
p,h1 {
    text-align:center;
    margin-left: auto;
    margin-right: auto
}
input,textarea,button,.logo{
   display: block;
   margin-left: auto;
   margin-right: auto
}

#frame {
	height: 100%;
	overflow: auto;
}

#speechButton {
	margin-bottom: 5px;
}

#translationText {
	margin: 5px auto;
	border: ridge 2px #64A0D6;
}


.logo {
   width:270px;
   margin-bottom:5px;
}
.pair {
    text-align:center;
}
select, .title  {
    display:inline-block;
}
.title {
    font: -webkit-small-control;
}
.mainbox {
   min-height: 100px;
   height:55%; 
   overflow:auto; 
   outline: solid 1px #5E5E5E;
   margin: 5px 0px;
}
.profile {
    width:30px;
    height:30px;
}
.line {
    text-align:left;
    font-size:14px;
    vertical-align:50%;
    margin: 3px 0 3px 10px;
	color: #3F3F3F;
	overflow-wrap: break-word;
}
.username {
    text-align:left;
    font-weight:bold;
    font-style:italic;
    color: #001433;
    font-size:12px;
    vertical-align:50%;
    margin-left: 2px;
}
.time {
	margin-left: 2px;
	text-align: left;
	font-style: italic;
	font-size: 10px;
}
.imageHolder {
	display: inline-block;
	vertical-align: top;
	max-width: 30px;
}
.textHolder {
	display: inline-block;
	max-width: 240px;
}

#listeningText{
  font-weight:bold;
  font-style:italic;
  font-size:12px;
  color:red;
  text-align: center;
}

</style>
<body>
<div id="frame">
	<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
	<img class="logo" src="https://raw.github.com/taylorlee/Babelogue/master/logo.png" >
	<div id="getAPIKey">
		<textarea id="apiKey" rows="4" cols="30" placeholder="Enter API Key"></textarea>
		<button type="button" onclick="inputAPIKey()">Add Key</button>
	</div>

	<div id="runTranslation" style="display:none;">
      <div class="pair">
      <span class="title">Language: </span>
        <select id="userLanguage"></select>
	    </div>
	  <div id="translateDiv" class="mainbox"></div>
<!--	  <input type="text" placeholder="Enter text for chat..." id="translationText" onkeypress="catchEnter(event)" ><br>-->
<!--	 This can be used to make the chatbox textbox a textarea instead (more room to see text)-->
	  <textarea id="translationText" rows="4" cols="30" placeholder="Enter text for chat..." onkeypress="catchEnter(event)" ></textarea>

	  <button id="speechButton" type="button" value="on" onclick="toggleSpeech(event)">Turn On Speech Recognition</button>
	  <div id="speechTextArea" style="display:none;">
      <div class="pair">
        <div id="listeningText" style="display:none;"></div>
        <span class="title">Speech: </span>
		<select id="speechLanguage" onchange="updateSpeechCountry()"></select>
	</div>
      <div class="pair">
        <div id="dialectTitle" style="display:none;"> 
        <span class="title">Dialect: </span>
		<select id="speechDialect" onchange="updateSpeechDialect()"></select>
	    </div>
	    </div>
	<!-- Removed because decision to merge two input textboxes
		<textarea id="speechText" rows="4" cols="30" placeholder="Your speech will appear here"></textarea>
	-->
		
	<!--
		<div id="results">
		  <span id="final_span" class="final"></span>
		  <span id="interim_span" class="interim"></span>
		  <p>
		</div>
	  -->
	<!--
		<button id="send_speech" onclick="sendSpeech()">Send</button>
	  -->
	<!--
		<div id="speechInfo">
		  <p id="info_speak_now">Speak now.</p>
		  <p id="info_no_speech">No speech was detected. You may need to adjust your
		    <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
		      microphone settings</a>.</p>
		  <p id="info_no_microphone" style="display:none">
		    No microphone was found. Ensure that a microphone is installed and that
		    <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
		    microphone settings</a> are configured correctly.</p>
		  <p id="info_allow">Click the "Allow" button above to enable your microphone.</p>
		  <p id="info_denied">Permission to use microphone was denied.</p>
		  <p id="info_blocked">Permission to use microphone is blocked.</p>
		  <p id="info_upgrade">The Speech to Text API is not supported by this browser.</p>
		</div>
	  -->
	  </div>
	</div>
</div>
<script>

var apiKey = '';
var userSpeechLanguage = "";
var userSpeechDialect = "";

var lastUserToPost;
var lastTime = 0;

// For speech
var speech_detection_on = false;
var speech_final_transcript = '';
var speech_recognizing = false;
var speech_ignore_onend;
var speech_start_timestamp;
var recognition;

function addAPIKey(key){
	// set API Key
	apiKey = key;
	console.log('2');
	
	// send key to shared state
	gapi.hangout.data.clearValue("APIKey");
	gapi.hangout.data.setValue("APIKey", apiKey);
	
	// hide api key text box and show chat
	document.getElementById('getAPIKey').style.display = 'none';
	document.getElementById('runTranslation').style.display = '';
	
	// set cursor focus to text box
	document.getElementById('translationText').focus();
	
	// load languages
	getLanguages();
}

function inputAPIKey() {
	console.log('4');
	// get key from text box and send to add function
	addAPIKey(document.getElementById('apiKey').value);
}

// Check for API key in shared state, returns 0 if key found, 1 if not found
function checkForKey() {
	console.log('3');
	var keys = gapi.hangout.data.getKeys();
	if(keys.indexOf('APIKey') != -1) {
		// get api key from shared state and send to add function
		addAPIKey(gapi.hangout.data.getValue('APIKey'));
		
		return 0;
	}
	else {
		return 1;
	}
}

function toggleSpeech(event) {
	// get speech toggle button
	var speechButton = document.getElementById('speechButton');
	var val = speechButton.value;
	
	// Turn ON speech detection
	if(val == "on"){
		// set button value and text to be turn off button
		speechButton.value = "off";
		speechButton.innerHTML = "Turn Off Speech Recognition";
		document.getElementById('speechTextArea').style.display = '';

    //added
    document.getElementById('listeningText').innerHTML = 'Listening...';
    document.getElementById('listeningText').style.display = '';
		
		// set cursor focus to text box
		document.getElementById('translationText').focus();

    // Add languages to drop down
    for (var i = 0; i < speech_to_lang_codes.length; i++) {
      speechLanguage.options[i] = new Option(speech_to_lang_codes[i][0], i);
    }

    if (userSpeechLanguage == "") {
      speechLanguage.selectedIndex = 6;
      updateSpeechCountry();
      speechDialect.selectedIndex = 6;
    } else {
      // User has already set language preferences before in session. Set languages
      speechLanguage.selectedIndex = userSpeechLanguage;
      updateSpeechCountry();
      speechDialect.selectedIndex = userSpeechDialect;
    }

    speech_detection_on = true;

    // Call a function to handle Speech to Text conversions
    speechToText(event);
	}
	else { // Turn OFF speech detection
		document.getElementById('speechTextArea').style.display = 'none';

    //added
    document.getElementById('listeningText').style.display = 'none';

		speechButton.value = "on";
		speechButton.innerHTML = "Turn On Speech Recognition";

    // Grab user's selected languages in case they turn it back on
    userSpeechLanguage = speechLanguage.selectedIndex;
    userSpeechDialect = speechDialect.selectedIndex;

    // Turn off speech recognizing
    speech_detection_on = false;
    speech_recognizing = false;
    recognition.stop()
    recognition.continuous = false;
    recognition.interimResults = false;

    // Clear the textarea
    // document.getElementById("speechText").value = '';

	}
}

function updateSpeechCountry() {
  for (var i = speechDialect.options.length - 1; i >= 0; i--) {
    speechDialect.remove(i);
  }
  var list = speech_to_lang_codes[speechLanguage.selectedIndex];
  for (var i = 1; i < list.length; i++) {
    speechDialect.options.add(new Option(list[i][1], list[i][0]));
  }

  if(list[1].length == 1){

    speechDialect.style.visibility = 'hidden';
    document.getElementById("dialectTitle").style.display = 'none'; 
  }
  else {

    speechDialect.style.visibility = 'visible';
    document.getElementById("dialectTitle").style.display = '';

  }
  //speechDialect.style.visibility = list[1].length == 1 ? 'hidden' : 'visible';


  // Update global variables for language
  userSpeechLanguage = speechLanguage.selectedIndex;

  if (typeof recognition !== 'undefined') {
    speech_recognizing = false;
    recognition.stop();
    recognition.continuous = false;
    recognition.interimResults = false;

    // Clear the textarea
    // document.getElementById("speechText").value = '';

    // Reinitialize recognition
    speechToText(event);
  }
}

function updateSpeechDialect() {
  userSpeechDialect = speechDialect.selectedIndex;

  if (typeof recognition !== 'undefined') {
    speech_recognizing = false;
    recognition.stop();
    recognition.continuous = false;
    recognition.interimResults = false;

    // Clear the textarea
    // document.getElementById("speechText").value = '';

    // Reinitialize recognition
    speechToText(event);
  }
}

function speechToText(event) {

  if (!('webkitSpeechRecognition' in window)) {

    console.log("No Web Speech API support");

    // Browser doesn't support Web Speech API. Notify user.
    // send_speech.style.visibility = 'hidden';
    // showSpeechInfo('info_upgrade');
  } else {
    // send_speech.style.display = 'inline-block';
    // var recognition = new webkitSpeechRecognition();
    recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;

    // Added
    speech_detection_on = true;
    speech_recognizing = true;

    // From function startButton(event)
    speech_final_transcript = '';

    recognition.lang = speechDialect.value;
    recognition.start();
    speech_ignore_onend = false;
    // final_span.innerHTML = '';
    // interim_span.innerHTML = '';
    // showSpeechInfo('info_allow');
    speech_start_timestamp = event.timeStamp;

    recognition.onstart = function() {
      speech_recognizing = true;
      // showSpeechInfo('info_speak_now');
      // start_img.src = 'mic-animate.gif';
    };

    recognition.onerror = function(event) {
      if (event.error == 'no-speech') {
        // showSpeechInfo('info_no_speech');
        speech_ignore_onend = true;
      }
      if (event.error == 'audio-capture') {
        // showSpeechInfo('info_no_microphone');
        speech_ignore_onend = true;
      }
      if (event.error == 'not-allowed') {
        if (event.timeStamp - speech_start_timestamp < 100) {
          // showSpeechInfo('info_blocked');
        } else {
          // showSpeechInfo('info_denied');
        }
        speech_ignore_onend = true;
      }
    };

    recognition.onend = function() {
      speech_recognizing = false;
      if (speech_ignore_onend) {
        return;
      }
      if (!speech_final_transcript) {
        // showSpeechInfo('info_start');
        return;
      }
      // showSpeechInfo('');
      if (window.getSelection) {
        // window.getSelection().removeAllRanges();
        // var range = document.createRange();
        // range.selectNode(document.getElementById('final_span'));
        // window.getSelection().addRange(range);
      }
    };

    recognition.onresult = function(event) {
      var interim_transcript = '';
      for (var i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          speech_final_transcript += event.results[i][0].transcript;

          // Add converted text to the textbox
          document.getElementById("translationText").value += event.results[i][0].transcript;

        } else {
          interim_transcript += event.results[i][0].transcript;
        }
      }
      speech_final_transcript = capitalize(speech_final_transcript);
      // final_span.innerHTML = linebreak(speech_final_transcript);
      // interim_span.innerHTML = linebreak(interim_transcript);

      // Add converted text to the textbox
      // document.getElementById("speechText").value += speech_final_transcript;

      // if (speech_final_transcript || interim_transcript) {
      //   showButtons('inline-block');
      // }
    };
  }

  var two_line = /\n\n/g;
  var one_line = /\n/g;
  function linebreak(s) {
    return s.replace(two_line, '<p></p>').replace(one_line, '<br>');
  }

  var first_char = /\S/;
  function capitalize(s) {
    return s.replace(first_char, function(m) { return m.toUpperCase(); });
  }
}

function showSpeechInfo(s) {
  if (s) {
    for (var child = speechInfo.firstChild; child; child = child.nextSibling) {
      if (child.style) {
        child.style.display = child.id == s ? 'inline' : 'none';
      }
    }
    speechInfo.style.visibility = 'visible';
  } else {
    speechInfo.style.visibility = 'hidden';
  }
}

function sendSpeech() {
  var text = document.getElementById("speechText").value;
  var source = detectLanguage(text);

  // Clear the textbox
  document.getElementById("speechText").value = '';

  console.log("Speech Text's Language");
  console.log(source);

  var user = gapi.hangout.getLocalParticipant();

  if (source.length == 2) {
    source = source + "   ";
  }

  var date = new Date();
  var time = date.getTime().toString();

  // store translated text in the shared state as [sender id] => [English text]
  gapi.hangout.data.setValue(user.id, source + time + text);
}

function detectLanguage(text) {
  var fromLang = "";
  var langSourceAPIurl = 'https://www.googleapis.com/language/translate/v2/detect?key=' + apiKey + '&q=' 
                         + encodeURI(text);
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", langSourceAPIurl, false );
  xmlhttp.send(null);

  //receive JSON object
  var responseObject = eval('('+xmlhttp.responseText+')');
  var fromLang = responseObject.data.detections[0][0].language;

  return fromLang;
}

function getLanguages() {
    var langURL = 'https://www.googleapis.com/language/translate/v2/languages?key=' + apiKey + '&target=en';
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", langURL, false );
    xmlhttp.send(null);

    //receive JSON object
    var responseObject = eval('('+xmlhttp.responseText+')');
    var dropDownList = document.getElementById('userLanguage');
    var langs = responseObject.data.languages;
    for (var x=0; x < langs.length; x++ ) {
    	if(langs[x].language == 'en') {
       		dropDownList.innerHTML += '<option value=\"' + langs[x].language + '\" selected>' + langs[x].name + '</option>'; 
        }
        else {
        	dropDownList.innerHTML += '<option value=\"' + langs[x].language + '\">' + langs[x].name + '</option>';
        }
    }
}

function translateText(fromLang, toLang, text) {

  //dont need to call translate if translating to the same language
  // Take substring of fromLang and toLang
  fromLang = fromLang.substr(0,2);
  toLang = toLang.substr(0,2);
  if(fromLang == toLang) return text;

	var translateAPIurl = 'https://www.googleapis.com/language/translate/v2?key=' + apiKey + '&q=' +
	encodeURI(text)+ '&source=' + fromLang + '&target=' + toLang;

	var xmlhttp = new XMLHttpRequest();
	xmlhttp.open("GET", translateAPIurl, false );
	xmlhttp.send(null);

	//receive JSON object
	var responseObject = eval('('+xmlhttp.responseText+')');
	var translated_text = responseObject.data.translations[0].translatedText;
	return translated_text;
}

function onStateChange(stateObj) {
	for(var i=0; i<stateObj.addedKeys.length; i++) {
		// get information about the sender of a message as well as the
		// English translation of the message they sent
		var senderId = stateObj.addedKeys[i].key;
		
		// if api key has been added to shared state
		// update our key but don't translate and put it in chat
		if(senderId == "APIKey") {
			addAPIKey(stateObj.addedKeys[i].value);
			console.log('1');
			continue;
		}
		
		var sender = gapi.hangout.getParticipantById(senderId);
		var username = sender.person.displayName;
		var userImgUrl = sender.person.image.url;
		var text = stateObj.addedKeys[i].value;
		var date = new Date(stateObj.addedKeys[i].timestamp);
		
		
		// split text into language code and message
		var langCode = text.substr(0,5);
		langCode = langCode.trim();
		var message = text.substr(18);
		
		// console.log(langCode + " : " + message);
		
		//get selected option for source language
    var userLanguageSelect = document.getElementById('userLanguage');
    var source = userLanguageSelect.options[userLanguageSelect.selectedIndex];
		var translated_text = translateText(langCode, source.value, message);
		
		
		// create a div to contain new message as well as the element that contains the chat
		var addElement = document.createElement("div");
		var div = document.getElementById('translateDiv');
		
		if(lastUserToPost == senderId) {
			// user was the last to post, so don't include name/image again
			
			// get span containing last message
			var span = div.lastChild.lastChild;
			
			// if last message was old (10 minutes), add new time
			if((date.getTime() - lastTime) > 600000){
				var addTime = document.createElement("div");
				addTime.className = "time";
				addTime.innerHTML = date.toLocaleTimeString();
				span.appendChild(addTime);
				lastTime = date.getTime();
			}
			
			// new div will be of "line" class and have the translated text inside
			addElement.className = "line";
			addElement.innerHTML = translated_text;
			
			// append message
			span.appendChild(addElement);
		}
		else {
			// update last message time
			lastTime = date.getTime();
			
			// include name/image/time in post and update last user to post
			var chatHTML = '<span class="imageHolder"><img class="profile" src="' + userImgUrl + '"/></span><span class="textHolder"><div class="username">' + username + ': </div>' + '<div class="time">' + date.toLocaleTimeString() + '</div>' + '<div class="line">' + translated_text + '</div></span>';
			
			lastUserToPost = senderId;
			
			addElement.innerHTML = chatHTML;
			div.appendChild(addElement);
		}
		
    	div.scrollTop = div.scrollHeight;
  
		//console.log(stateObj.addedKeys[i].key);
		//console.log(stateObj.addedKeys[i].value);
		//console.log(stateObj.addedKeys[i].timestamp);
	}
}

function pressTranslateButton() {
  var retVal = '<ul>';
  var text = document.getElementById('translationText').value;
  document.getElementById('translationText').value = '';
  
  //get selected option for source and destination language
  var userLanguageSelect = document.getElementById('userLanguage');
  var source = userLanguageSelect.options[userLanguageSelect.selectedIndex].value;

  if (speech_detection_on) {
    // We are in speech recognizing mode, which has different user input via dropdownmenu (different menus)
    // Therefore, we cannot use the "source" var that user selected for Chatbox
    // We need to grab the information dynamically
    source = detectLanguage(text);
  }

	// get user
  var user = gapi.hangout.getLocalParticipant();
  
  // if source language code is 2 characters, pad to 4 characters
  if(source.length == 2){
  	source = source + "   ";
  }
  
  // get timestamp to make every message unique
  // will be removed on receiving end
  var date = new Date();
  var time = date.getTime().toString();
   
  // store translated text in the shared state as [sender id] => [English text]
  gapi.hangout.data.setValue(user.id, source + time + text);

}

// add enter functionality to input
function catchEnter(key) {
  if(key.keyCode == 13){
  	pressTranslateButton();
  	key.preventDefault();
  }
}

var speech_to_lang_codes =
[['Afrikaans',       ['af-ZA']],
 ['Bahasa Indonesia',['id-ID']],
 ['Bahasa Melayu',   ['ms-MY']],
 ['Català',          ['ca-ES']],
 ['Čeština',         ['cs-CZ']],
 ['Deutsch',         ['de-DE']],
 ['English',         ['en-AU', 'Australia'],
                     ['en-CA', 'Canada'],
                     ['en-IN', 'India'],
                     ['en-NZ', 'New Zealand'],
                     ['en-ZA', 'South Africa'],
                     ['en-GB', 'United Kingdom'],
                     ['en-US', 'United States']],
 ['Español',         ['es-AR', 'Argentina'],
                     ['es-BO', 'Bolivia'],
                     ['es-CL', 'Chile'],
                     ['es-CO', 'Colombia'],
                     ['es-CR', 'Costa Rica'],
                     ['es-EC', 'Ecuador'],
                     ['es-SV', 'El Salvador'],
                     ['es-ES', 'España'],
                     ['es-US', 'Estados Unidos'],
                     ['es-GT', 'Guatemala'],
                     ['es-HN', 'Honduras'],
                     ['es-MX', 'México'],
                     ['es-NI', 'Nicaragua'],
                     ['es-PA', 'Panamá'],
                     ['es-PY', 'Paraguay'],
                     ['es-PE', 'Perú'],
                     ['es-PR', 'Puerto Rico'],
                     ['es-DO', 'República Dominicana'],
                     ['es-UY', 'Uruguay'],
                     ['es-VE', 'Venezuela']],
 ['Euskara',         ['eu-ES']],
 ['Français',        ['fr-FR']],
 ['Galego',          ['gl-ES']],
 ['Hrvatski',        ['hr_HR']],
 ['IsiZulu',         ['zu-ZA']],
 ['Íslenska',        ['is-IS']],
 ['Italiano',        ['it-IT', 'Italia'],
                     ['it-CH', 'Svizzera']],
 ['Magyar',          ['hu-HU']],
 ['Nederlands',      ['nl-NL']],
 ['Norsk bokmål',    ['nb-NO']],
 ['Polski',          ['pl-PL']],
 ['Português',       ['pt-BR', 'Brasil'],
                     ['pt-PT', 'Portugal']],
 ['Română',          ['ro-RO']],
 ['Slovenčina',      ['sk-SK']],
 ['Suomi',           ['fi-FI']],
 ['Svenska',         ['sv-SE']],
 ['Türkçe',          ['tr-TR']],
 ['български',       ['bg-BG']],
 ['Pусский',         ['ru-RU']],
 ['Српски',          ['sr-RS']],
 ['한국어',            ['ko-KR']],
 ['中文',             ['cmn-Hans-CN', '普通话 (中国大陆)'],
                     ['cmn-Hans-HK', '普通话 (香港)'],
                     ['cmn-Hant-TW', '中文 (台灣)'],
                     ['yue-Hant-HK', '粵語 (香港)']],
 ['日本語',           ['ja-JP']],
 ['Lingua latīna',   ['la']]];


function init() {
  // When API is ready...                                                         
  gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
          document.getElementById('getAPIKey')
            .style.display = '';
        }
        checkForKey();
      });
  gapi.hangout.data.onStateChanged.add(onStateChange);
}

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>

