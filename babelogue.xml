<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *	
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
	<ModulePrefs title="Google Hangout Translate App">
		<Require feature="rpc" />
		<Require feature="views" />
	</ModulePrefs>
	<Content type="html"><![CDATA[     

<html>
<style type="text/css">
p {text-align:center;}
input,select {
   display: block;
   margin-left: auto;
   margin-right: auto 
}
</style>
<body>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<h3>Translation Hangout App</h3>

<div id="getAPIKey">
	<p>Input Your API Key (better get it right the first time):</p>
	<textarea id="apiKey" rows="4" cols="30" placeholder="Enter your key here"></textarea>
	<button type="button" onclick="addAPIKey()">Add Key</button>
</div>

<div id="runTranslation" style="display:none;">

	<p>Translate Your Speech:</p>
	<button id="speechButton" type="button" value="on" onclick="toggleSpeech(event)">Turn On</button>
	
	<div id="speechTextArea" style="display:none;">
    <select id="speechLanguage" onchange="updateSpeechCountry()"></select>
    <select id="speechDialect" onchange="updateSpeechDialect()"></select>
		<textarea id="speechText" rows="4" cols="30" placeholder="Your speech will appear here"></textarea>
    
<!--
    <div id="results">
      <span id="final_span" class="final"></span>
      <span id="interim_span" class="interim"></span>
      <p>
    </div>
  -->
		<button id="send_speech" onclick="sendSpeech()">Send</button>

<!--
    <div id="speechInfo">
      <p id="info_speak_now">Speak now.</p>
      <p id="info_no_speech">No speech was detected. You may need to adjust your
        <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
          microphone settings</a>.</p>
      <p id="info_no_microphone" style="display:none">
        No microphone was found. Ensure that a microphone is installed and that
        <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
        microphone settings</a> are configured correctly.</p>
      <p id="info_allow">Click the "Allow" button above to enable your microphone.</p>
      <p id="info_denied">Permission to use microphone was denied.</p>
      <p id="info_blocked">Permission to use microphone is blocked.</p>
      <p id="info_upgrade">The Speech to Text API is not supported by this browser.</p>
    </div>

  -->

	</div>

	<p> Your Language: </p>
	<select id="userLanguage">
	</select>
	<div id="translateDiv" style="height:350px; overflow:auto; border:1px solid;"></div>

	<input type="text" id="translationText" onkeypress="catchEnter(event)" ><br>
	<p>Type and press Enter</p>

</div>

<script>

var apiKey = '';
var userSpeechLanguage = "";
var userSpeechDialect = "";

// For speech
var speech_final_transcript = '';
var speech_recognizing = false;
var speech_ignore_onend;
var speech_start_timestamp;

function addAPIKey() {
	// get API key text
	apiKey = document.getElementById('apiKey').value;
	
	// hide api key text box and show chat
	document.getElementById('getAPIKey').style.display = 'none';
	document.getElementById('runTranslation').style.display = '';
	
	// load languages
	getLanguages();
}

function toggleSpeech(event) {
	// get speech toggle button
	var speechButton = document.getElementById('speechButton');
	var val = speechButton.value;
	
	// Turn ON speech detection
	if(val == "on"){
		// set button value and text to be turn off button
		speechButton.value = "off";
		speechButton.innerHTML = "Turn Off";
		document.getElementById('speechTextArea').style.display = '';

    // Add languages to drop down
    for (var i = 0; i < speech_to_lang_codes.length; i++) {
      speechLanguage.options[i] = new Option(speech_to_lang_codes[i][0], i);
    }

    if (userSpeechLanguage == "") {
      speechLanguage.selectedIndex = 6;
      updateSpeechCountry();
      speechDialect.selectedIndex = 6;
    } else {
      // User has already set language preferences before in session. Set languages
      speechLanguage.selectedIndex = userSpeechLanguage;
      updateSpeechCountry();
      speechDialect.selectedIndex = userSpeechDialect;
    }

    // Call a function to handle Speech to Text conversions
    speechToText(event);
	}
	else { // Turn OFF speech detection
		document.getElementById('speechTextArea').style.display = 'none';
		speechButton.value = "on";
		speechButton.innerHTML = "Turn On";

    // Grab user's selected languages in case they turn it back on
    userSpeechLanguage = speechLanguage.selectedIndex;
    userSpeechDialect = speechDialect.selectedIndex;

    // Turn off speech recognizing
    speech_recognizing = false;

    // Clear the textarea
    document.getElementById("speechText").value = '';


    // console.log("userSpeechLanguage:");
    // console.log(userSpeechLanguage);
    // console.log("userSpeechDialect:");
    // console.log(userSpeechDialect);
	}
}

function updateSpeechCountry() {
  for (var i = speechDialect.options.length - 1; i >= 0; i--) {
    speechDialect.remove(i);
  }
  var list = speech_to_lang_codes[speechLanguage.selectedIndex];
  for (var i = 1; i < list.length; i++) {
    speechDialect.options.add(new Option(list[i][1], list[i][0]));
  }
  speechDialect.style.visibility = list[1].length == 1 ? 'hidden' : 'visible';

  // Update global variables for language
  userSpeechLanguage = speechLanguage.selectedIndex;

  // TODO: Change the recognition object's language on the fly
  if (typeof recognition !== 'undefined') {
    console.log("Recognition is defined");
    recognition.lang = speechDialect.value;
  } else {
    console.log("Recognition isn't defined");
  }
}

function updateSpeechDialect() {
  userSpeechDialect = speechDialect.selectedIndex;

  // TODO: Change the recognition object's language on the fly
  if (typeof recognition !== 'undefined') {
    console.log("Recognition is defined");
    recognition.lang = speechDialect.value;
  } else {
    console.log("Recognition isn't defined");
  }
}

function speechToText(event) {

  // console.log("speechToText called");

  // Moved to global variables
    // var speech_final_transcript = '';
    // // var speech_recognizing = false;
    // var speech_recognizing = true;
    // var speech_ignore_onend;
    // var speech_start_timestamp;

  // MOVED TO INSIDE THE IF STATEMENT
  // speech_recognizing = true;

  // // From function startButton(event)
  // speech_final_transcript = '';
  // recognition.lang = speechDialect.value;
  // recognition.start();
  // speech_ignore_onend = false;
  // final_span.innerHTML = '';
  // interim_span.innerHTML = '';
  // // showSpeechInfo('info_allow');
  // speech_start_timestamp = event.timeStamp;

  // console.log("speech_start_timestamp:");
  // console.log(speech_start_timestamp);

  if (!('webkitSpeechRecognition' in window)) {

    console.log("No Web Speech API support");

    // Browser doesn't support Web Speech API. Notify user.
    send_speech.style.visibility = 'hidden';
    // showSpeechInfo('info_upgrade');
  } else {
    // send_speech.style.display = 'inline-block';
    var recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;

    // Added
    speech_recognizing = true;

    // From function startButton(event)
    speech_final_transcript = '';
    recognition.lang = speechDialect.value;
    recognition.start();
    speech_ignore_onend = false;
    // final_span.innerHTML = '';
    // interim_span.innerHTML = '';
    // showSpeechInfo('info_allow');
    speech_start_timestamp = event.timeStamp;

    // console.log("speech_start_timestamp:");
    // console.log(speech_start_timestamp);

    // End moved

    recognition.onstart = function() {

      // console.log("recognition.onstart called");

      speech_recognizing = true;
      // showSpeechInfo('info_speak_now');
      // start_img.src = 'mic-animate.gif';
    };

    recognition.onerror = function(event) {

      // console.log("recognition.onerror called");

      if (event.error == 'no-speech') {
        // showSpeechInfo('info_no_speech');
        speech_ignore_onend = true;
      }
      if (event.error == 'audio-capture') {
        // showSpeechInfo('info_no_microphone');
        speech_ignore_onend = true;
      }
      if (event.error == 'not-allowed') {
        if (event.timeStamp - speech_start_timestamp < 100) {
          // showSpeechInfo('info_blocked');
        } else {
          // showSpeechInfo('info_denied');
        }
        speech_ignore_onend = true;
      }
    };

    recognition.onend = function() {

      // console.log("recognition.onend called");

      speech_recognizing = false;
      if (speech_ignore_onend) {
        return;
      }
      if (!speech_final_transcript) {
        // showSpeechInfo('info_start');
        return;
      }
      // showSpeechInfo('');
      if (window.getSelection) {
        // window.getSelection().removeAllRanges();
        // var range = document.createRange();
        // range.selectNode(document.getElementById('final_span'));
        // window.getSelection().addRange(range);
      }
    };

    recognition.onresult = function(event) {

      // console.log("recognition.onresult called");

      var interim_transcript = '';
      for (var i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          speech_final_transcript += event.results[i][0].transcript;

          // Add converted text to the textbox
          document.getElementById("speechText").value += event.results[i][0].transcript;

        } else {
          interim_transcript += event.results[i][0].transcript;
        }
      }
      speech_final_transcript = capitalize(speech_final_transcript);
      // final_span.innerHTML = linebreak(speech_final_transcript);
      // interim_span.innerHTML = linebreak(interim_transcript);

      // Add converted text to the textbox
      // document.getElementById("speechText").value += speech_final_transcript;


      // if (speech_final_transcript || interim_transcript) {
      //   showButtons('inline-block');
      // }
    };
  }

  var two_line = /\n\n/g;
  var one_line = /\n/g;
  function linebreak(s) {
    return s.replace(two_line, '<p></p>').replace(one_line, '<br>');
  }

  var first_char = /\S/;
  function capitalize(s) {
    return s.replace(first_char, function(m) { return m.toUpperCase(); });
  }
}

function showSpeechInfo(s) {
  if (s) {
    for (var child = speechInfo.firstChild; child; child = child.nextSibling) {
      if (child.style) {
        child.style.display = child.id == s ? 'inline' : 'none';
      }
    }
    speechInfo.style.visibility = 'visible';
  } else {
    speechInfo.style.visibility = 'hidden';
  }
}

function sendSpeech() {
  var text = document.getElementById("speechText").value;
  var source = detectLanguage(text);

  // Clear the textbox
  document.getElementById("speechText").value = '';

  console.log("Speech Text's Language");
  console.log(source);

  var user = gapi.hangout.getLocalParticipant();

  if (source.length == 2) {
    source = source + "  ";
  }

  var date = new Date();
  var time = date.getTime().toString();

  // store translated text in the shared state as [sender id] => [English text]
  gapi.hangout.data.setValue(user.id, source + time + text);
}

function detectLanguage(text) {
  var fromLang = "";
  var langSourceAPIurl = 'https://www.googleapis.com/language/translate/v2/detect?key=' + apiKey + '&q=' 
                         + encodeURI(text);
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", langSourceAPIurl, false );
  xmlhttp.send(null);

  //receive JSON object
  var responseObject = eval('('+xmlhttp.responseText+')');
  var fromLang = responseObject.data.detections[0][0].language;

  return fromLang;
}

function getLanguages() {
    var langURL = 'https://www.googleapis.com/language/translate/v2/languages?key=' + apiKey + '&target=en';
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", langURL, false );
    xmlhttp.send(null);

    //receive JSON object
    var responseObject = eval('('+xmlhttp.responseText+')');
    var dropDownList = document.getElementById('userLanguage');
    var langs = responseObject.data.languages;
    for (var x=0; x < langs.length; x++ ) {
    	if(langs[x].language == 'en') {
       		dropDownList.innerHTML += '<option value=\"' + langs[x].language + '\" selected>' + langs[x].name + '</option>'; 
        }
        else {
        	dropDownList.innerHTML += '<option value=\"' + langs[x].language + '\">' + langs[x].name + '</option>';
        }
    }
}

function translateText(fromLang, toLang, text) {

  //dont need to call translate if translating to the same language
  if(fromLang == toLang) return text;

	var translateAPIurl = 'https://www.googleapis.com/language/translate/v2?key=' + apiKey + '&q=' +
	encodeURI(text)+ '&source=' + fromLang + '&target=' + toLang;

	var xmlhttp = new XMLHttpRequest();
	xmlhttp.open("GET", translateAPIurl, false );
	xmlhttp.send(null);

	//receive JSON object
	var responseObject = eval('('+xmlhttp.responseText+')');
	var translated_text = responseObject.data.translations[0].translatedText;
	return translated_text;
}

function onStateChange(stateObj) {
	for(var i=0; i<stateObj.addedKeys.length; i++) {
		// get information about the sender of a message as well as the
		// English translation of the message they sent
		var senderId = stateObj.addedKeys[i].key;
		var sender = gapi.hangout.getParticipantById(senderId);
		var username = sender.person.displayName;
		var userImgUrl = sender.person.image.url;
		var text = stateObj.addedKeys[i].value;
		var date = new Date(stateObj.addedKeys[i].timestamp * 1000);
		
		// split text into language code and message
		var langCode = text.substr(0,4);
		langCode = langCode.trim();
		var message = text.substr(17);
		
		// console.log(langCode + " : " + message);
		
		//get selected option for source language
	    var userLanguageSelect = document.getElementById('userLanguage');
	    var source = userLanguageSelect.options[userLanguageSelect.selectedIndex];
		var translated_text = translateText(langCode, source.value, message);
		
		var chatHTML = "<img src='" + userImgUrl + "' style='width:30px; height:30px;' />" + username + ': ' + translated_text;
        var div = document.getElementById('translateDiv');
        var addElement = document.createElement("div");
        addElement.innerHTML = chatHTML;
        div.appendChild(addElement);
        div.scrollTop = div.scrollHeight;
  
		//console.log(stateObj.addedKeys[i].key);
		//console.log(stateObj.addedKeys[i].value);
		//console.log(stateObj.addedKeys[i].timestamp);
	}
}

function pressTranslateButton() {
  var retVal = '<ul>';
  var text = document.getElementById('translationText').value;
  document.getElementById('translationText').value = '';
  
  //get selected option for source and destination language
  var userLanguageSelect = document.getElementById('userLanguage');
  var source = userLanguageSelect.options[userLanguageSelect.selectedIndex].value;

	// send text to shared state
  var user = gapi.hangout.getLocalParticipant();
<!--  var translated_text = translateText(source, 'en', text);-->
  
  // if source language code is 2 characters, pad to 4 characters
  if(source.length == 2){
  	source = source + "  ";
  }
  
  var date = new Date();
  var time = date.getTime().toString();
  
  // console.log(source + text);
  // console.log(time.length);
   
  // store translated text in the shared state as [sender id] => [English text]
  gapi.hangout.data.setValue(user.id, source + time + text);

}

// add enter functionality to input
function catchEnter(key) {
if(key.keyCode == 13)
	pressTranslateButton();
}

// BEGIN: Speech to Text
var speech_to_lang_codes =
[['Afrikaans',       ['af-ZA']],
 ['Bahasa Indonesia',['id-ID']],
 ['Bahasa Melayu',   ['ms-MY']],
 ['Català',          ['ca-ES']],
 ['Čeština',         ['cs-CZ']],
 ['Deutsch',         ['de-DE']],
 ['English',         ['en-AU', 'Australia'],
                     ['en-CA', 'Canada'],
                     ['en-IN', 'India'],
                     ['en-NZ', 'New Zealand'],
                     ['en-ZA', 'South Africa'],
                     ['en-GB', 'United Kingdom'],
                     ['en-US', 'United States']],
 ['Español',         ['es-AR', 'Argentina'],
                     ['es-BO', 'Bolivia'],
                     ['es-CL', 'Chile'],
                     ['es-CO', 'Colombia'],
                     ['es-CR', 'Costa Rica'],
                     ['es-EC', 'Ecuador'],
                     ['es-SV', 'El Salvador'],
                     ['es-ES', 'España'],
                     ['es-US', 'Estados Unidos'],
                     ['es-GT', 'Guatemala'],
                     ['es-HN', 'Honduras'],
                     ['es-MX', 'México'],
                     ['es-NI', 'Nicaragua'],
                     ['es-PA', 'Panamá'],
                     ['es-PY', 'Paraguay'],
                     ['es-PE', 'Perú'],
                     ['es-PR', 'Puerto Rico'],
                     ['es-DO', 'República Dominicana'],
                     ['es-UY', 'Uruguay'],
                     ['es-VE', 'Venezuela']],
 ['Euskara',         ['eu-ES']],
 ['Français',        ['fr-FR']],
 ['Galego',          ['gl-ES']],
 ['Hrvatski',        ['hr_HR']],
 ['IsiZulu',         ['zu-ZA']],
 ['Íslenska',        ['is-IS']],
 ['Italiano',        ['it-IT', 'Italia'],
                     ['it-CH', 'Svizzera']],
 ['Magyar',          ['hu-HU']],
 ['Nederlands',      ['nl-NL']],
 ['Norsk bokmål',    ['nb-NO']],
 ['Polski',          ['pl-PL']],
 ['Português',       ['pt-BR', 'Brasil'],
                     ['pt-PT', 'Portugal']],
 ['Română',          ['ro-RO']],
 ['Slovenčina',      ['sk-SK']],
 ['Suomi',           ['fi-FI']],
 ['Svenska',         ['sv-SE']],
 ['Türkçe',          ['tr-TR']],
 ['български',       ['bg-BG']],
 ['Pусский',         ['ru-RU']],
 ['Српски',          ['sr-RS']],
 ['한국어',            ['ko-KR']],
 ['中文',             ['cmn-Hans-CN', '普通话 (中国大陆)'],
                     ['cmn-Hans-HK', '普通话 (香港)'],
                     ['cmn-Hant-TW', '中文 (台灣)'],
                     ['yue-Hant-HK', '粵語 (香港)']],
 ['日本語',           ['ja-JP']],
 ['Lingua latīna',   ['la']]];




 // END: Speech to Text



function init() {
  // When API is ready...                                                         
  gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
          document.getElementById('getAPIKey')
            .style.display = '';
        }
      });
  
  gapi.hangout.data.onStateChanged.add(onStateChange);
}

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>

